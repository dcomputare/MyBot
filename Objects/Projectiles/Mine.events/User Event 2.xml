<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="12">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    if(exploded == true) {
        exit;
    } else {
        exploded = true;
    }
    instance_create(x,y,Explosion);
    playsound(x,y,ExplosionSnd);
    
    with (Character) {
        if (distance_to_object(other) &lt; other.blastRadius and !(team == other.team and id != other.ownerPlayer.object and place_meeting(x, y+1, Obstacle)))
        {
            var rdir, vectorfactor;
            rdir = point_direction(other.x,other.y,x,y);
            vectorfactor = point_distance(0, 0, power(sin(degtorad(rdir)), 2), power(cos(degtorad(rdir)), 2));
            motion_add(rdir, min(15, other.knockback-other.knockback*(distance_to_object(other)/other.blastRadius)) * vectorfactor);
            if(other.team != team or id==other.ownerPlayer.object) &amp;&amp; !ubered and hp &gt; 0
            {
                hp -= other.explosionDamage*sqr((1-(distance_to_object(other)/other.blastRadius)));
                timeUnscathed = 0;
                if (id == other.ownerPlayer.object and lastDamageDealer != -1 and lastDamageDealer != other.ownerPlayer and other.reflector == noone)
                {
                    lastDamageSource = FINISHED_OFF_GIB;
                }
                else 
                {
                    if (lastDamageDealer != other.ownerPlayer and lastDamageDealer != player and other.reflector != lastDamageDealer)
                    {
                        secondToLastDamageDealer = lastDamageDealer;
                        alarm[4] = alarm[3]
                    }
                    if (other.ownerPlayer != id or (other.reflector != noone and other.ownerPlayer == id))
                        alarm[3] = ASSIST_TIME;
                    lastDamageDealer = other.ownerPlayer;
                    lastDamageSource = other.weapon;
                    if (id==other.ownerPlayer.object and other.reflector != noone)
                    {
                        lastDamageDealer = other.reflector;
                        lastDamageSource = WEAPON_REFLECTED_STICKY;
                    }
                }
                if(global.gibLevel &gt; 0)
                {
                    repeat(3)
                    {
                        var blood;
                        blood = instance_create(x,y,Blood);
                        blood.direction = point_direction(other.x,other.y,x,y)-180;
                    }
                }
                if (id==other.ownerPlayer.object)
                {
                    moveStatus = 1;
                    vspeed*=0.8;
                }
                else if (other.team == team)
                {
                    moveStatus = 2;
                    vspeed*=0.8;
                }
                else
                {
                    moveStatus = 4;
                    vspeed*=0.8
                }
            }
            cloakAlpha = min(cloakAlpha + 0.2, 1);
        }
    }

    
    with (Sentry){
        if (distance_to_object(other) &lt; other.blastRadius) &amp;&amp; (team != other.team) { 
        hp -= other.explosionDamage*sqr((1-(distance_to_object(other)/other.blastRadius)));
        lastDamageDealer = other.ownerPlayer;
        lastDamageSource = WEAPON_MINEGUN;
        }   
    }    
     
     with (Generator){
        if (distance_to_object(other) &lt; other.blastRadius) &amp;&amp; (team != other.team) { 
            alarm[0] = regenerationBuffer;
            isShieldRegenerating = false;
            //allow overkill to be applied directly to the target
            var hitDamage;
            hitDamage = other.explosionDamage*sqr((1-(distance_to_object(other)/other.blastRadius)));
            if (hitDamage &gt; shieldHp) {
                hp -= hitDamage - shieldHp;
                hp -= shieldHp * shieldResistance;
                shieldHp = 0;
            } else {
                hp -= hitDamage * shieldResistance;
                shieldHp -= hitDamage;
            }
        }   
    }
       
    with (Rocket) {
        if (distance_to_object(other) &lt; other.blastRadius/4){
            if(distance_to_object(other) &lt; other.blastRadius/7 and (other.team != team or other.ownerPlayer == ownerPlayer)) {
                characterHit=-1;
                event_user(5);
            } else {
                motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/(other.blastRadius*5)));
            }
        }
    }
    
    with (DeadGuy) {
        if (distance_to_object(other) &lt; other.blastRadius){
            motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/other.blastRadius));
        }
    }
    
    with(Mine) {
        if (distance_to_object(other) &lt; other.blastRadius*0.66 and (other.team != team or other.ownerPlayer == ownerPlayer)){
            event_user(2);
        }
    }
    with (Gib) {
        if (distance_to_object(other) &lt; other.blastRadius){
            motion_add(point_direction(other.x,other.y,x,y),15-15*(distance_to_object(other)/other.blastRadius));
            rotspeed=random(151)-75;
        }
    }
    
    with(LooseSheet) {
        if (distance_to_object(other) &lt; other.blastRadius){
            motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/other.blastRadius));
        }
    }
    with(Bubble) {
        if (distance_to_object(other) &lt; other.blastRadius*0.66){
        alarm[0]-=200;
        }    
    }

    instance_destroy();
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
