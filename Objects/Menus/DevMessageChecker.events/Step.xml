<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">// Read the response
response += read_string(socket, tcp_receive_available(socket));

if(tcp_eof(socket)) {
    if(socket_has_error(socket)) {
        // Can't download the file? Then simply stop.
        instance_destroy();
        exit;
    }
    
    global.devMessagesChecked = true;
    
    // Process the received file
    var CRLF, LF, CR;
    CR = chr(13);
    LF = chr(10);
    CRLF = CR + LF;
      
    // split the response into multiple lines, so we can process them
    var messageArray, a, b;
    for(a = 0; string_pos(LF, response) != 0; a += 1) {
        b = string_pos(LF, response);
        messageArray[a] = string_copy(response, 1, b - 1);
        // remove a possible CR at the end, if the newline happened to be a CRLF instead of just a LF
        if(string_char_at(messageArray[a], string_length(messageArray[a])) == CR) {
            messageArray[a] = string_copy(messageArray[a], 1, string_length(messageArray[a]) - 1);
        }
        response = string_copy(response, b + string_length(LF), string_length(response) - b - string_length(LF) + 1);
    }
    messageArray[a] = response;
    a += 1;
      
    var c;
    for(c = 0; c &lt; a; c += 1) {
        switch(messageArray[c]) {
            case "ShowMessage":
                c += 1;
                show_message(messageArray[c]);
                break;
            case "Version":
                c += 1;
                versioncheck = (messageArray[c]);
                versionend = string_pos("!",versioncheck);
                version = string_copy(versioncheck,1,versionend-1);
                changeslength = string_length(versioncheck)-versionend;
                changes=string_copy(versioncheck,versionend+1,changeslength);
                if real(version) &gt; VERSION {
                    update=show_message_ext("Updates have been made to Gang Garrison 2!##"+changes,"Update","Cancel","");
                    if (update == 1){
                        execute_shell("gg2updater.exe","");
                        game_end();
                    }
                }
            break;
        }
    }
    
    instance_destroy();
    exit;
}
image_speed = 5/room_speed;
</argument>
      </arguments>
    </action>
  </actions>
</event>
